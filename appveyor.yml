image: Visual Studio 2019
platform: x64
configuration: Release

environment:
  TOXENV: "py"
  TWINE_USERNAME: "anthrotype"
  TWINE_PASSWORD:
    secure: 9L/DdqoIILlN7qCh0lotvA==
  PYTHON2_EXE: "C:\\Python27\\python.exe"
  BUILD_SKIA_FROM_SOURCE: "0"
  SKIA_LIBRARY_DIR: "build\\download"
  DOWNLOAD_SKIA_SCRIPT: "ci\\download_libskia.py"
  GITHUB_TOKEN:
    secure: u8SBO+xCC7mI3SGCbaIZtyLi8+j/g92iA+E2p1iy05WoNed6sIwe3o9odK3bjO5J
  matrix:
    - PYTHON: "C:\\Python36"
    - PYTHON: "C:\\Python36-x64"
    - PYTHON: "C:\\Python37"
    - PYTHON: "C:\\Python37-x64"
    - PYTHON: "C:\\Python38"
    - PYTHON: "C:\\Python38-x64"

init:
  - "ECHO %PYTHON%"

install:
  # checkout git sub-modules (shallow fetch)
  - git submodule update --init --recursive --depth 1

  # prepend newly installed Python to the PATH
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

  # upgrade pip to avoid out-of-date warnings
  - python -m pip install --disable-pip-version-check --upgrade pip
  - pip --version

  # upgrade setuptools and virtualenv
  - pip install --upgrade setuptools wheel virtualenv

  # install build requirements
  - pip install setuptools_scm cython

  # install tox to run test suite in a virtual environment
  - pip install --upgrade tox

  # download pre-compiled libskia
  - cmd: IF "%BUILD_SKIA_FROM_SOURCE%"=="0" ( pip install githubrelease && python "%DOWNLOAD_SKIA_SCRIPT%" )
  # build wheel
  - python setup.py bdist_wheel
  # get the full path to the compiled wheel (ugly but works)
  - dir /s /b dist\skia_pathops*.whl > wheel.pth
  - set /p WHEEL_PATH=<wheel.pth

build: false

test_script:
  # run tests on the compiled wheel
  - tox --installpkg "%WHEEL_PATH%"

on_failure:
  # print the content of tox *.log files
  - ps: Get-Content .tox\\log\\*.log
  - ps: $envlogdir = ".tox\\" + ${env:TOXENV} + "\\log"; `
        foreach($logfile in Get-ChildItem $envlogdir){ `
            $logpath = $envlogdir + "\\" + $logfile; `
            Get-Content -path $logpath }

on_success:
  # Deploy wheels on tags to PyPI
  - ps: >-
      if($env:APPVEYOR_REPO_TAG -eq 'true') {
        Write-Output ("Deploying " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI...")
        pip install --upgrade twine
        twine upload $env:WHEEL_PATH
      } else {
        Write-Output "Not deploying as this is not a tagged commit"
      }

artifacts:
  # archive the generated packages in the ci.appveyor.com build report
  - path: dist\*.whl
